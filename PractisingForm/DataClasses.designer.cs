#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PractisingForm
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlace(Place instance);
    partial void UpdatePlace(Place instance);
    partial void DeletePlace(Place instance);
    partial void InsertHotel(Hotel instance);
    partial void UpdateHotel(Hotel instance);
    partial void DeleteHotel(Hotel instance);
    partial void InsertRoomCatagory(RoomCatagory instance);
    partial void UpdateRoomCatagory(RoomCatagory instance);
    partial void DeleteRoomCatagory(RoomCatagory instance);
    partial void InsertRoomNumber(RoomNumber instance);
    partial void UpdateRoomNumber(RoomNumber instance);
    partial void DeleteRoomNumber(RoomNumber instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::PractisingForm.Properties.Settings.Default.Database1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Place> Places
		{
			get
			{
				return this.GetTable<Place>();
			}
		}
		
		public System.Data.Linq.Table<Hotel> Hotels
		{
			get
			{
				return this.GetTable<Hotel>();
			}
		}
		
		public System.Data.Linq.Table<RoomCatagory> RoomCatagories
		{
			get
			{
				return this.GetTable<RoomCatagory>();
			}
		}
		
		public System.Data.Linq.Table<RoomNumber> RoomNumbers
		{
			get
			{
				return this.GetTable<RoomNumber>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Place")]
	public partial class Place : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PlaceName;
		
		private EntitySet<Hotel> _Hotels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlaceNameChanging(string value);
    partial void OnPlaceNameChanged();
    #endregion
		
		public Place()
		{
			this._Hotels = new EntitySet<Hotel>(new Action<Hotel>(this.attach_Hotels), new Action<Hotel>(this.detach_Hotels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PlaceName
		{
			get
			{
				return this._PlaceName;
			}
			set
			{
				if ((this._PlaceName != value))
				{
					this.OnPlaceNameChanging(value);
					this.SendPropertyChanging();
					this._PlaceName = value;
					this.SendPropertyChanged("PlaceName");
					this.OnPlaceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Hotel", Storage="_Hotels", ThisKey="Id", OtherKey="PlaceId")]
		public EntitySet<Hotel> Hotels
		{
			get
			{
				return this._Hotels;
			}
			set
			{
				this._Hotels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hotels(Hotel entity)
		{
			this.SendPropertyChanging();
			entity.Place = this;
		}
		
		private void detach_Hotels(Hotel entity)
		{
			this.SendPropertyChanging();
			entity.Place = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hotel")]
	public partial class Hotel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _HotelName;
		
		private string _HotelAddress;
		
		private string _ContactNumber;
		
		private string _HotelRating;
		
		private int _PlaceId;
		
		private EntitySet<RoomCatagory> _RoomCatagories;
		
		private EntityRef<Place> _Place;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHotelNameChanging(string value);
    partial void OnHotelNameChanged();
    partial void OnHotelAddressChanging(string value);
    partial void OnHotelAddressChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnHotelRatingChanging(string value);
    partial void OnHotelRatingChanged();
    partial void OnPlaceIdChanging(int value);
    partial void OnPlaceIdChanged();
    #endregion
		
		public Hotel()
		{
			this._RoomCatagories = new EntitySet<RoomCatagory>(new Action<RoomCatagory>(this.attach_RoomCatagories), new Action<RoomCatagory>(this.detach_RoomCatagories));
			this._Place = default(EntityRef<Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string HotelName
		{
			get
			{
				return this._HotelName;
			}
			set
			{
				if ((this._HotelName != value))
				{
					this.OnHotelNameChanging(value);
					this.SendPropertyChanging();
					this._HotelName = value;
					this.SendPropertyChanged("HotelName");
					this.OnHotelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelAddress", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string HotelAddress
		{
			get
			{
				return this._HotelAddress;
			}
			set
			{
				if ((this._HotelAddress != value))
				{
					this.OnHotelAddressChanging(value);
					this.SendPropertyChanging();
					this._HotelAddress = value;
					this.SendPropertyChanged("HotelAddress");
					this.OnHotelAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelRating", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string HotelRating
		{
			get
			{
				return this._HotelRating;
			}
			set
			{
				if ((this._HotelRating != value))
				{
					this.OnHotelRatingChanging(value);
					this.SendPropertyChanging();
					this._HotelRating = value;
					this.SendPropertyChanged("HotelRating");
					this.OnHotelRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceId", DbType="Int NOT NULL")]
		public int PlaceId
		{
			get
			{
				return this._PlaceId;
			}
			set
			{
				if ((this._PlaceId != value))
				{
					if (this._Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaceIdChanging(value);
					this.SendPropertyChanging();
					this._PlaceId = value;
					this.SendPropertyChanged("PlaceId");
					this.OnPlaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_RoomCatagory", Storage="_RoomCatagories", ThisKey="Id", OtherKey="HotelId")]
		public EntitySet<RoomCatagory> RoomCatagories
		{
			get
			{
				return this._RoomCatagories;
			}
			set
			{
				this._RoomCatagories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Hotel", Storage="_Place", ThisKey="PlaceId", OtherKey="Id", IsForeignKey=true)]
		public Place Place
		{
			get
			{
				return this._Place.Entity;
			}
			set
			{
				Place previousValue = this._Place.Entity;
				if (((previousValue != value) 
							|| (this._Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place.Entity = null;
						previousValue.Hotels.Remove(this);
					}
					this._Place.Entity = value;
					if ((value != null))
					{
						value.Hotels.Add(this);
						this._PlaceId = value.Id;
					}
					else
					{
						this._PlaceId = default(int);
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomCatagories(RoomCatagory entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = this;
		}
		
		private void detach_RoomCatagories(RoomCatagory entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomCatagory")]
	public partial class RoomCatagory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _RoomType;
		
		private int _RoomRent;
		
		private string _Description;
		
		private int _HotelId;
		
		private EntitySet<RoomNumber> _RoomNumbers;
		
		private EntityRef<Hotel> _Hotel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoomTypeChanging(string value);
    partial void OnRoomTypeChanged();
    partial void OnRoomRentChanging(int value);
    partial void OnRoomRentChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnHotelIdChanging(int value);
    partial void OnHotelIdChanged();
    #endregion
		
		public RoomCatagory()
		{
			this._RoomNumbers = new EntitySet<RoomNumber>(new Action<RoomNumber>(this.attach_RoomNumbers), new Action<RoomNumber>(this.detach_RoomNumbers));
			this._Hotel = default(EntityRef<Hotel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoomType
		{
			get
			{
				return this._RoomType;
			}
			set
			{
				if ((this._RoomType != value))
				{
					this.OnRoomTypeChanging(value);
					this.SendPropertyChanging();
					this._RoomType = value;
					this.SendPropertyChanged("RoomType");
					this.OnRoomTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomRent", DbType="Int NOT NULL")]
		public int RoomRent
		{
			get
			{
				return this._RoomRent;
			}
			set
			{
				if ((this._RoomRent != value))
				{
					this.OnRoomRentChanging(value);
					this.SendPropertyChanging();
					this._RoomRent = value;
					this.SendPropertyChanged("RoomRent");
					this.OnRoomRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelId", DbType="Int NOT NULL")]
		public int HotelId
		{
			get
			{
				return this._HotelId;
			}
			set
			{
				if ((this._HotelId != value))
				{
					if (this._Hotel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHotelIdChanging(value);
					this.SendPropertyChanging();
					this._HotelId = value;
					this.SendPropertyChanged("HotelId");
					this.OnHotelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomCatagory_RoomNumber", Storage="_RoomNumbers", ThisKey="Id", OtherKey="RoomCatagoryId")]
		public EntitySet<RoomNumber> RoomNumbers
		{
			get
			{
				return this._RoomNumbers;
			}
			set
			{
				this._RoomNumbers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_RoomCatagory", Storage="_Hotel", ThisKey="HotelId", OtherKey="Id", IsForeignKey=true)]
		public Hotel Hotel
		{
			get
			{
				return this._Hotel.Entity;
			}
			set
			{
				Hotel previousValue = this._Hotel.Entity;
				if (((previousValue != value) 
							|| (this._Hotel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotel.Entity = null;
						previousValue.RoomCatagories.Remove(this);
					}
					this._Hotel.Entity = value;
					if ((value != null))
					{
						value.RoomCatagories.Add(this);
						this._HotelId = value.Id;
					}
					else
					{
						this._HotelId = default(int);
					}
					this.SendPropertyChanged("Hotel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomNumbers(RoomNumber entity)
		{
			this.SendPropertyChanging();
			entity.RoomCatagory = this;
		}
		
		private void detach_RoomNumbers(RoomNumber entity)
		{
			this.SendPropertyChanging();
			entity.RoomCatagory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomNumber")]
	public partial class RoomNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RoomNo;
		
		private System.Nullable<System.DateTime> _Check_In;
		
		private System.Nullable<System.DateTime> _Check_Out;
		
		private int _RoomCatagoryId;
		
		private EntityRef<RoomCatagory> _RoomCatagory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoomNoChanging(int value);
    partial void OnRoomNoChanged();
    partial void OnCheck_InChanging(System.Nullable<System.DateTime> value);
    partial void OnCheck_InChanged();
    partial void OnCheck_OutChanging(System.Nullable<System.DateTime> value);
    partial void OnCheck_OutChanged();
    partial void OnRoomCatagoryIdChanging(int value);
    partial void OnRoomCatagoryIdChanged();
    #endregion
		
		public RoomNumber()
		{
			this._RoomCatagory = default(EntityRef<RoomCatagory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNo", DbType="Int NOT NULL")]
		public int RoomNo
		{
			get
			{
				return this._RoomNo;
			}
			set
			{
				if ((this._RoomNo != value))
				{
					this.OnRoomNoChanging(value);
					this.SendPropertyChanging();
					this._RoomNo = value;
					this.SendPropertyChanged("RoomNo");
					this.OnRoomNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Check In]", Storage="_Check_In", DbType="Date")]
		public System.Nullable<System.DateTime> Check_In
		{
			get
			{
				return this._Check_In;
			}
			set
			{
				if ((this._Check_In != value))
				{
					this.OnCheck_InChanging(value);
					this.SendPropertyChanging();
					this._Check_In = value;
					this.SendPropertyChanged("Check_In");
					this.OnCheck_InChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Check Out]", Storage="_Check_Out", DbType="Date")]
		public System.Nullable<System.DateTime> Check_Out
		{
			get
			{
				return this._Check_Out;
			}
			set
			{
				if ((this._Check_Out != value))
				{
					this.OnCheck_OutChanging(value);
					this.SendPropertyChanging();
					this._Check_Out = value;
					this.SendPropertyChanged("Check_Out");
					this.OnCheck_OutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomCatagoryId", DbType="Int NOT NULL")]
		public int RoomCatagoryId
		{
			get
			{
				return this._RoomCatagoryId;
			}
			set
			{
				if ((this._RoomCatagoryId != value))
				{
					if (this._RoomCatagory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomCatagoryIdChanging(value);
					this.SendPropertyChanging();
					this._RoomCatagoryId = value;
					this.SendPropertyChanged("RoomCatagoryId");
					this.OnRoomCatagoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomCatagory_RoomNumber", Storage="_RoomCatagory", ThisKey="RoomCatagoryId", OtherKey="Id", IsForeignKey=true)]
		public RoomCatagory RoomCatagory
		{
			get
			{
				return this._RoomCatagory.Entity;
			}
			set
			{
				RoomCatagory previousValue = this._RoomCatagory.Entity;
				if (((previousValue != value) 
							|| (this._RoomCatagory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomCatagory.Entity = null;
						previousValue.RoomNumbers.Remove(this);
					}
					this._RoomCatagory.Entity = value;
					if ((value != null))
					{
						value.RoomNumbers.Add(this);
						this._RoomCatagoryId = value.Id;
					}
					else
					{
						this._RoomCatagoryId = default(int);
					}
					this.SendPropertyChanged("RoomCatagory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
